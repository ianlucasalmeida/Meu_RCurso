pl + annotate("text", x = 0, y = 0,
label = "Feliz Aniversário, alguém :)"
colour = "red", size = 9)
pl + annotate("text", x = 0, y = 0,
label = "Feliz Aniversário, alguém :)"
colour = "red", size = 9)
pl + annotate("text", x = 0, y = 0,
label = "Feliz Aniversário, alguém :)"
colour = "red", size = 9)
pl + annotate("text", x = 0, y = 0,
label = "Feliz Aniversário"
colour = "red", size = 9)
pl + annotate("text", x = 0, y = 0,
label = "Feliz Aniversário",
colour = "red", size = 9)
# Adicionar texto ao centro do coração
pl + annotate("text", x = 0, y = 0,
label = "Feliz Aniversário",
colour = "white", size = 6, fontface = "bold")
# Exibir o gráfico
print(pl)
ls
clear
f == FALSE
dir.create("Meu RCurso")
setwd("Meu RCurso")
print("Resultado dos Cálculos:")
334 + 456
900 / 45
899 - 844
73 * 73
#Atribuição de valores
x <- 133
y <- 36
z <- x + y
print(paste("O valor de z é: ", z))
raiz_quadrada <- srqt(z)
F == FALSE
sum( 10² + 11² + ... + 20²)
sum((10:20)²)
dir.create("Meu RCurso")
setwd("Meu RCurso")
print("Resultado dos Cálculos:")
334 + 456
900 / 45
899 - 844
73 * 73
#Atribuição de valores
x <- 133
y <- 36
z <- x + y
print(paste("O valor de z é: ", z))
raiz_quadrada <- srqt(z)
sum((10:20)²)
sum((10:20)²)
sum((10:20)^2)
2²
2^2
X <- 133
Y <- 36
Z <- X + Y
raiz_Z <- sqrt(Z)
log_raiz <- log(raiz_Z)
resultado <- round(log_raiz, 0)
print(resultado)  # Saída: 1.946
X <- 133
Y <- 36
Z <- X + Y   # Z = 133 + 36 = 169
raiz_Z <- sqrt(Z)   # sqrt(169) = 13
log_raiz <- log(raiz_Z)   # ln(13) ≈ 2.564949
resultado <- round(log_raiz, 0)   # 2.564949 → 3
# atv_2-questão fibonacci
# Sequência de Fibonacci (5 primeiros termos começando em 0)
fibonacci <- c(0, 1, 1, 2, 3)
soma <- sum(fibonacci)           # Soma = 7
log_soma <- log(soma)            # ln(7) ≈ 1.94591
resultado <- round(log_soma, 3)  # Arredonda para 1.946
print(resultado)  # Saída: 1.946
X <- 133
Y <- 36
Z <- X + Y   # Z = 133 + 36 = 169
raiz_Z <- sqrt(Z)   # sqrt(169) = 13
log_raiz <- log(raiz_Z)   # ln(13) ≈ 2.564949
resultado <- round(log_raiz, 0)   # 2.564949 → 3
# atv_2-questão fibonacci
# Sequência de Fibonacci (5 primeiros termos começando em 0)
fibonacci <- c(0, 1, 1, 2, 3)
soma <- sum(fibonacci)           # Soma = 7
log_soma <- log(soma)            # ln(7) ≈ 1.94591
resultado <- round(log_soma, 3)  # Arredonda para 1.946
print(resultado)  # Saída: 1.946
#q3_
derivada <- cos(2) + 1        # Calcula f'(2) ≈ 0.5838532
resultado <- round(derivada, 3)  # Arredonda para 0.584
print(resultado)  # Saída: 0.584
X <- 133
Y <- 36
Z <- X + Y   # Z = 133 + 36 = 169
raiz_Z <- sqrt(Z)   # sqrt(169) = 13
log_raiz <- log(raiz_Z)   # ln(13) ≈ 2.564949
resultado <- round(log_raiz, 0)   # 2.564949 → 3
# atv_2-questão fibonacci
# Sequência de Fibonacci (5 primeiros termos começando em 0)
fibonacci <- c(0, 1, 1, 2, 3)
soma <- sum(fibonacci)           # Soma = 7
log_soma <- log(soma)            # ln(7) ≈ 1.94591
resultado <- round(log_soma, 3)  # Arredonda para 1.946
print(resultado)  # Saída: 1.946
#q3_Calculo da derivada
derivada <- cos(2) + 1        # Calcula f'(2) ≈ 0.5838532
resultado <- round(derivada, 3)  # Arredonda para 0.584
print(resultado)  # Saída: 0.584
#q4_factorial
fatorial <- factorial(10)      # Calcula 10! = 3628800
log_fatorial <- log10(fatorial)  # log10(3628800) ≈ 6.560305
resultado <- round(log_fatorial, 2)  # Arredonda para 6.56
print(resultado)  # Saída: 6.56
X <- 133
Y <- 36
Z <- X + Y   # Z = 133 + 36 = 169
raiz_Z <- sqrt(Z)   # sqrt(169) = 13
log_raiz <- log(raiz_Z)   # ln(13) ≈ 2.564949
resultado <- round(log_raiz, 0)   # 2.564949 → 3
# atv_2-questão fibonacci
# Sequência de Fibonacci (5 primeiros termos começando em 0)
fibonacci <- c(0, 1, 1, 2, 3)
soma <- sum(fibonacci)           # Soma = 7
log_soma <- log(soma)            # ln(7) ≈ 1.94591
resultado <- round(log_soma, 3)  # Arredonda para 1.946
print(resultado)  # Saída: 1.946
#q3_Calculo da derivada
derivada <- cos(2) + 1        # Calcula f'(2) ≈ 0.5838532
resultado <- round(derivada, 3)  # Arredonda para 0.584
print(resultado)  # Saída: 0.584
#q4_factorial
fatorial <- factorial(10)      # Calcula 10! = 3628800
log_fatorial <- log10(fatorial)  # log10(3628800) ≈ 6.560305
resultado <- round(log_fatorial, 2)  # Arredonda para 6.56
print(resultado)  # Saída: 6.56
#q5_velocidade da luz
m <- 10
c <- 3e8  # Velocidade da luz em m/s
E <- m * c^2
log_E <- log(E)
resultado <- round(log_E, 2)
print(resultado)  # Saída: 41.34
X <- 133
Y <- 36
Z <- X + Y   # Z = 133 + 36 = 169
raiz_Z <- sqrt(Z)   # sqrt(169) = 13
log_raiz <- log(raiz_Z)   # ln(13) ≈ 2.564949
resultado <- round(log_raiz, 0)   # 2.564949 → 3
# atv_2-questão fibonacci
# Sequência de Fibonacci (5 primeiros termos começando em 0)
fibonacci <- c(0, 1, 1, 2, 3)
soma <- sum(fibonacci)           # Soma = 7
log_soma <- log(soma)            # ln(7) ≈ 1.94591
resultado <- round(log_soma, 3)  # Arredonda para 1.946
print(resultado)  # Saída: 1.946
#q3_Calculo da derivada
derivada <- cos(2) + 1        # Calcula f'(2) ≈ 0.5838532
resultado <- round(derivada, 3)  # Arredonda para 0.584
print(resultado)  # Saída: 0.584
#q4_factorial
fatorial <- factorial(10)      # Calcula 10! = 3628800
log_fatorial <- log10(fatorial)  # log10(3628800) ≈ 6.560305
resultado <- round(log_fatorial, 2)  # Arredonda para 6.56
print(resultado)  # Saída: 6.56
#q5_velocidade da luz
m <- 10
c <- 3e8  # Velocidade da luz em m/s
E <- m * c^2
log_E <- log(E)
resultado <- round(log_E, 2)
print(resultado)  # Saída: 41.34
#q6_vetor
v <- c(2, 5, 7, 8, 9)
resultados <- v^3 + v^2 + v
media <- mean(resultados)
print(media)  # Saída: 394.2
install.packages(c("tidyverse", "ggplot2", "caret", "corrplot", "rpart", "randomForest"))
library(tidyverse)
library(readr)
CAR_DETAILS_FROM_CAR_DEKHO <- read_csv("archive/CAR DETAILS FROM CAR DEKHO.csv")
View(CAR_DETAILS_FROM_CAR_DEKHO)
# Carregar o dataset
car_data <- read.csv("CAR DETAILS FROM CAR DEKHO.csv", stringsAsFactors = FALSE)
# Carregar o dataset
car_data <- read.csv("/home/ianalmeida/Meu RCurso/Meu RCurso/archive/CAR DETAILS FROM CAR DEKHO.csv", stringsAsFactors = FALSE)
# Visualizar as primeiras linhas
head(car_data)
# Ver estrutura dos dados
str(car_data)
# Converter colunas categóricas para fatores
car_data <- car_data %>%
mutate(
fuel = as.factor(fuel),
seller_type = as.factor(seller_type),
transmission = as.factor(transmission),
owner = as.factor(owner)
)
View(car_data)
# Verificar dados faltantes
sum(is.na(car_data)) # Se houver NAs, tratar com na.omit() ou imputação
# Remover duplicatas (se necessário)
car_data <- distinct(car_data)
# Carregar o dataset
car_data <- read.csv("/home/ianalmeida/Meu RCurso/Meu RCurso/archive/CAR DETAILS FROM CAR DEKHO.csv", stringsAsFactors = FALSE)
# Visualizar as primeiras linhas
head(car_data)
# Ver estrutura dos dados
str(car_data)
# Converter colunas categóricas para fatores
car_data <- car_data %>%
mutate(
fuel = as.factor(fuel),
seller_type = as.factor(seller_type),
transmission = as.factor(transmission),
owner = as.factor(owner)
)
car_data %>%
group_by(fuel) %>%
summarise(avg_price = mean(selling_price)) %>%
ggplot(aes(x = fuel, y = avg_price, fill = fuel)) +
geom_bar(stat = "identity") +
labs(title = "Preço Médio por Tipo de Combustível", x = "Combustível", y = "Preço Médio")
install.packages(c("tidyverse", "ggplot2", "caret", "corrplot", "rpart", "randomForest"))
library(tidyverse)
install.packages(c("dplyr", "ggplot2", "caret", "corrplot", "rpart", "randomForest"))
# Carregar o dataset
car_data <- read.csv("/home/ianalmeida/Meu RCurso/Meu RCurso/archive/CAR DETAILS FROM CAR DEKHO.csv", stringsAsFactors = FALSE)
# Visualizar as primeiras linhas
head(car_data)
# Ver estrutura dos dados
str(car_data)
# Converter colunas categóricas para fatores
car_data <- car_data %>%
mutate(
fuel = as.factor(fuel),
seller_type = as.factor(seller_type),
transmission = as.factor(transmission),
owner = as.factor(owner)
)
# Instalar e carregar pacotes necessários
install.packages(c("tidyverse", "dplyr", "ggplot2", "caret", "corrplot", "rpart", "randomForest"))
library(tidyverse)
install.packages("tidyverse")
install.packages("tidyverse")
# Instalar e carregar pacotes necessários
install.packages(c("tidyverse", "dplyr", "ggplot2", "caret", "corrplot", "rpart", "randomForest"))
library(tidyverse)
